<?php
/**
 * TransactionResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Compasso\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BPAG Gateway de Pagamentos
 *
 * UOL Diveo Payment PCI Gateway  # Authenticação  Para autenticação com a plataforma de pagamentos o sistema cliente deve se encarregar do envio dos seguintes headers    Header  | Obrigatório | Descrição | Exemplo  --------|-------------|---------|----------  Merchant | Sim | Empresa fornecida pelo UOL Diveo | uoldiveo  Account | Sim | Unidade fornecida pelo UOL Diveo | uoldiveo  Date | Sim | Data atual no formato `EEE, d MMM yyyy HH:mm:ss z` | Wed, 25 Jun 2018 12:00:00 GMT  Authorization | Sim | Chave calculada com base na requisição | UOLWS access-id:signature:hmac-algorithm:protocol-version  OnBehalfOfAccessId | Não | Em caso de utilização de Access Id/Client Secret diferente ao do Merchant, deve ser enviado o Access Id do Merchant | e401cf78cc8d85fd92f1adda74a4c160    ## Descrição do Protocolo da ApiSecurity  Para todo cliente de um web service deve ser criada sua respectiva credencial.  As credenciais são formadas por access-id e secret-key.  O access-id é um identificador único e aleatório de um cliente(exemplo: 99d1932acad7a4ce93ea321495b96cde)  A secret-key é um valor aleatório criado de forma segura para melhor atender as necessidades criptograficas do algoritmo de assinatura (exemplo: G8ZnZ1EkSDPcsgBXLoAQeyhLyEfBXNSkezSqnW/akZQ=)    Essa credencial deverá ser inserida no Header Authorization de todas as requisições do cliente de forma a identificá-lo, como mostrado abaixo.    - **Authorization**: UOLWS access-id:signature:hmac-algorithm:protocol-version  - **signature**: explicado abaixo em 'Calculando a Assinatura'  - **hash-algorithm**: Identificador de um algoritmo de HMAC utilizado para assinar a requisição. As opções são 's1' para HMacSHA1 e 's2' para HMacSHA256. Cada web service pode escolher quais dos algoritmos ele suporta e, caso esse parâmetro seja omitido, qual é o algoritmo padrão. Outras opções podem ser definidas pelos webservices, caso necessário. deve ser usado apenas na versão 0.2 do protocolo.  - **protocol-version**: versão do protocolo de autenticação UOLWS. Opções são 0.1 ou 0.2.    ## Calculando a Assinatura  ### Protocolo Versão 0.2    - **signature**: Base64( hmac-algorithm( secret-key, string-to-sign) );  - **string-to-sign**: `HTTP-Verb + \"\\n\" + Content-MD5 + \"\\n\" + Content-Type + \"\\n\" + Date + \"\\n\" + Canonicalized-X-UOL-Headers + HTTP-Path-Info`  - **HTTP-Verb**: O verbo da requisição HTTP; POST, GET, DELETE etc.    > Os headers Content-MD5, Content-Type e Date tem natureza posicional, por isso, o nome do Header não deve ser inserido na StringToSign, apenas seus valores. Se os Headers Content-Type e Content-MD5 não estiverem presentes na requisição(ambos são opcionais para requisições PUT e sem sentido para GET) considerar a string vazia como o seu valor, ficando apenas o \"\\n\" na respectiva posição. O valor do Header Date é obrigatório.    - **Canonicalized-X-UOL-Headers**     1.  Converter os Headers que comecem com 'X-UOL-' para lower-case. Por exemplo, 'X-UOL-AlternateKey' se torna 'x-uol-alternatekey'     2. Ordenar os Headers lexicograficamente pelos seus nomes. Desse mode x-uol-alternatekey vem antes de x-uol-date.     3. Combinar os Header com o mesmo nome em um Header único com os seus valores separados por vírgulas e um espaços em branco entre os valores. Por exemplo, 'x-uol-alternate-key: ip=127.0.0.1' e 'x-uol-alternate-key: idt_person=1237654' devem ser combinados em 'x-uol-alternate-key: ip=127.0.0.1, idt_person=1237654'     4. Fazer 'Unfold' dos Headers longos, removendo LWS(rfc2616, sessão 2.2) por um único espaço em branco.     5. Remover os espaços entre os dois pontos e o valor do header. Por exemplo 'x-uol-alternate-key: ip=127.0.0.1,idt_person=1237654' se torna 'x-uol-alternate-key:ip=127.0.0.1,idt_person=1237654'     6. Finalmente, adicione um 'new-line'(\\n) para cada Header da lista, resultando em uma só String.    - **HTTP-Path-Info**: A parte de URL da requisição que vai de após nome do servidor até a query string. Exemplos    Primeira Linha da requisição  | HTTP-Path-Info  --------|-------------  GET http://foo.bar/a.html | /a.html  HEAD /xyz?a=b HTTP/1.1 | /xyz  POST /some/path.html HTTP/1.1 | /some/path.html    ### Protocolo Versão 0.1    > Devido a questões de segurança este protocolo foi descontinuado
 *
 * OpenAPI spec version: 3.0.X
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Compasso\Bpag\Model\Api;

use \ArrayAccess;
use Compasso\Bpag\Model\Api\ObjectSerializer;

/**
 * TransactionResponse Class Doc Comment
 *
 * @category Class
 * @description Dados de uma transação
 * @package  Compasso\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action' => 'string',
        'amount' => 'int',
        'booklet' => '\Compasso\Bpag\Model\Api\BookletResponse',
        'credit_card' => '\Compasso\Bpag\Model\Api\CreditCardResponse',
        'date' => '\DateTime',
        'normalized_fi_status' => 'string',
        'normalized_fi_status_code' => 'int',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action' => null,
        'amount' => 'int64',
        'booklet' => null,
        'credit_card' => null,
        'date' => 'date-time',
        'normalized_fi_status' => null,
        'normalized_fi_status_code' => 'int32',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action' => 'action',
        'amount' => 'amount',
        'booklet' => 'booklet',
        'credit_card' => 'creditCard',
        'date' => 'date',
        'normalized_fi_status' => 'normalizedFIStatus',
        'normalized_fi_status_code' => 'normalizedFIStatusCode',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action' => 'setAction',
        'amount' => 'setAmount',
        'booklet' => 'setBooklet',
        'credit_card' => 'setCreditCard',
        'date' => 'setDate',
        'normalized_fi_status' => 'setNormalizedFiStatus',
        'normalized_fi_status_code' => 'setNormalizedFiStatusCode',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action' => 'getAction',
        'amount' => 'getAmount',
        'booklet' => 'getBooklet',
        'credit_card' => 'getCreditCard',
        'date' => 'getDate',
        'normalized_fi_status' => 'getNormalizedFiStatus',
        'normalized_fi_status_code' => 'getNormalizedFiStatusCode',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTION_UNKNOWN = 'UNKNOWN';
    const ACTION_CREATE = 'CREATE';
    const ACTION_PURCHASE = 'PURCHASE';
    const ACTION_CAPTURE = 'CAPTURE';
    const ACTION_AUTHORIZE = 'AUTHORIZE';
    const ACTION_PROBE = 'PROBE';
    const ACTION_CANCEL = 'CANCEL';
    const ACTION_REFUND = 'REFUND';
    const ACTION_FRAUD_SCAN = 'FRAUD_SCAN';
    const NORMALIZED_FI_STATUS_PROCESSED_PAID = 'PROCESSED_PAID';
    const NORMALIZED_FI_STATUS_PROCESSED_AUTHORIZED = 'PROCESSED_AUTHORIZED';
    const NORMALIZED_FI_STATUS_PROCESSED_NOT_PAID = 'PROCESSED_NOT_PAID';
    const NORMALIZED_FI_STATUS_PROCESSED_CANCELED = 'PROCESSED_CANCELED';
    const NORMALIZED_FI_STATUS_PROCESSED_PARTIALLY_PAID = 'PROCESSED_PARTIALLY_PAID';
    const NORMALIZED_FI_STATUS_PROCESSED_PENDING_FI = 'PROCESSED_PENDING_FI';
    const NORMALIZED_FI_STATUS_PROCESSED_PENDING_USER = 'PROCESSED_PENDING_USER';
    const NORMALIZED_FI_STATUS_PROCESSED_REFUNDED = 'PROCESSED_REFUNDED';
    const NORMALIZED_FI_STATUS_PROCESSED_IN_ANALYSIS = 'PROCESSED_IN_ANALYSIS';
    const NORMALIZED_FI_STATUS_PROCESSED_REJECT = 'PROCESSED_REJECT';
    const NORMALIZED_FI_STATUS_PROCESSED_ERROR = 'PROCESSED_ERROR';
    const NORMALIZED_FI_STATUS_PENDING_PROCESS = 'PENDING_PROCESS';
    const NORMALIZED_FI_STATUS_PROCESSED_ERROR_FI = 'PROCESSED_ERROR_FI';
    const STATUS_UNKNOWN = 'UNKNOWN';
    const STATUS_CREATED = 'CREATED';
    const STATUS_PROCESSING = 'PROCESSING';
    const STATUS_ACCEPTED = 'ACCEPTED';
    const STATUS_REJECTED = 'REJECTED';
    const STATUS_PAID = 'PAID';
    const STATUS_PENDING_USER = 'PENDING_USER';
    const STATUS_PENDING_FI = 'PENDING_FI';
    const STATUS_HOLDING = 'HOLDING';
    const STATUS_ERROR = 'ERROR';
    const STATUS_ERROR_FI = 'ERROR_FI';
    const STATUS_CANCELED = 'CANCELED';
    const STATUS_REFUNDED = 'REFUNDED';
    const STATUS_PRE_AUTHORIZED = 'PRE_AUTHORIZED';
    const STATUS_NO_PAID = 'NO_PAID';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_UNKNOWN,
            self::ACTION_CREATE,
            self::ACTION_PURCHASE,
            self::ACTION_CAPTURE,
            self::ACTION_AUTHORIZE,
            self::ACTION_PROBE,
            self::ACTION_CANCEL,
            self::ACTION_REFUND,
            self::ACTION_FRAUD_SCAN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNormalizedFiStatusAllowableValues()
    {
        return [
            self::NORMALIZED_FI_STATUS_PROCESSED_PAID,
            self::NORMALIZED_FI_STATUS_PROCESSED_AUTHORIZED,
            self::NORMALIZED_FI_STATUS_PROCESSED_NOT_PAID,
            self::NORMALIZED_FI_STATUS_PROCESSED_CANCELED,
            self::NORMALIZED_FI_STATUS_PROCESSED_PARTIALLY_PAID,
            self::NORMALIZED_FI_STATUS_PROCESSED_PENDING_FI,
            self::NORMALIZED_FI_STATUS_PROCESSED_PENDING_USER,
            self::NORMALIZED_FI_STATUS_PROCESSED_REFUNDED,
            self::NORMALIZED_FI_STATUS_PROCESSED_IN_ANALYSIS,
            self::NORMALIZED_FI_STATUS_PROCESSED_REJECT,
            self::NORMALIZED_FI_STATUS_PROCESSED_ERROR,
            self::NORMALIZED_FI_STATUS_PENDING_PROCESS,
            self::NORMALIZED_FI_STATUS_PROCESSED_ERROR_FI,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_CREATED,
            self::STATUS_PROCESSING,
            self::STATUS_ACCEPTED,
            self::STATUS_REJECTED,
            self::STATUS_PAID,
            self::STATUS_PENDING_USER,
            self::STATUS_PENDING_FI,
            self::STATUS_HOLDING,
            self::STATUS_ERROR,
            self::STATUS_ERROR_FI,
            self::STATUS_CANCELED,
            self::STATUS_REFUNDED,
            self::STATUS_PRE_AUTHORIZED,
            self::STATUS_NO_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['booklet'] = isset($data['booklet']) ? $data['booklet'] : null;
        $this->container['credit_card'] = isset($data['credit_card']) ? $data['credit_card'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['normalized_fi_status'] = isset($data['normalized_fi_status']) ? $data['normalized_fi_status'] : null;
        $this->container['normalized_fi_status_code'] = isset($data['normalized_fi_status_code']) ? $data['normalized_fi_status_code'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getNormalizedFiStatusAllowableValues();
        if (!is_null($this->container['normalized_fi_status']) && !in_array($this->container['normalized_fi_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'normalized_fi_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Ação executada
     *
     * @return $this
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Valor
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets booklet
     *
     * @return \Compasso\Bpag\Model\Api\BookletResponse
     */
    public function getBooklet()
    {
        return $this->container['booklet'];
    }

    /**
     * Sets booklet
     *
     * @param \Compasso\Bpag\Model\Api\BookletResponse $booklet Dados específicos em caso de boletos
     *
     * @return $this
     */
    public function setBooklet($booklet)
    {
        $this->container['booklet'] = $booklet;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return \Compasso\Bpag\Model\Api\CreditCardResponse
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param \Compasso\Bpag\Model\Api\CreditCardResponse $credit_card Dados específicos em caso de cartão de crédito
     *
     * @return $this
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Data da transação no formato ISO 8601
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets normalized_fi_status
     *
     * @return string
     */
    public function getNormalizedFiStatus()
    {
        return $this->container['normalized_fi_status'];
    }

    /**
     * Sets normalized_fi_status
     *
     * @param string $normalized_fi_status Status normalizado
     *
     * @return $this
     */
    public function setNormalizedFiStatus($normalized_fi_status)
    {
        $allowedValues = $this->getNormalizedFiStatusAllowableValues();
        if (!is_null($normalized_fi_status) && !in_array($normalized_fi_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'normalized_fi_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['normalized_fi_status'] = $normalized_fi_status;

        return $this;
    }

    /**
     * Gets normalized_fi_status_code
     *
     * @return int
     */
    public function getNormalizedFiStatusCode()
    {
        return $this->container['normalized_fi_status_code'];
    }

    /**
     * Sets normalized_fi_status_code
     *
     * @param int $normalized_fi_status_code Código de status normalizado
     *
     * @return $this
     */
    public function setNormalizedFiStatusCode($normalized_fi_status_code)
    {
        $this->container['normalized_fi_status_code'] = $normalized_fi_status_code;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


