<?php
/**
 * MeioDePagamento
 *
 * PHP version 5
 *
 * @category Class
 * @package  Compasso\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API BPAG Gateway de Pagamentos
 *
 * UOL Diveo Payment PCI Gateway  # Authenticação  Para autenticação com a plataforma de pagamentos o sistema cliente deve se encarregar do envio dos seguintes headers    Header  | Obrigatório | Descrição | Exemplo  --------|-------------|---------|----------  Merchant | Sim | Empresa fornecida pelo UOL Diveo | uoldiveo  Account | Sim | Unidade fornecida pelo UOL Diveo | uoldiveo  Date | Sim | Data atual no formato `EEE, d MMM yyyy HH:mm:ss z` | Wed, 25 Jun 2018 12:00:00 GMT  Authorization | Sim | Chave calculada com base na requisição | UOLWS access-id:signature:hmac-algorithm:protocol-version  OnBehalfOfAccessId | Não | Em caso de utilização de Access Id/Client Secret diferente ao do Merchant, deve ser enviado o Access Id do Merchant | e401cf78cc8d85fd92f1adda74a4c160    ## Descrição do Protocolo da ApiSecurity  Para todo cliente de um web service deve ser criada sua respectiva credencial.  As credenciais são formadas por access-id e secret-key.  O access-id é um identificador único e aleatório de um cliente(exemplo: 99d1932acad7a4ce93ea321495b96cde)  A secret-key é um valor aleatório criado de forma segura para melhor atender as necessidades criptograficas do algoritmo de assinatura (exemplo: G8ZnZ1EkSDPcsgBXLoAQeyhLyEfBXNSkezSqnW/akZQ=)    Essa credencial deverá ser inserida no Header Authorization de todas as requisições do cliente de forma a identificá-lo, como mostrado abaixo.    - **Authorization**: UOLWS access-id:signature:hmac-algorithm:protocol-version  - **signature**: explicado abaixo em 'Calculando a Assinatura'  - **hash-algorithm**: Identificador de um algoritmo de HMAC utilizado para assinar a requisição. As opções são 's1' para HMacSHA1 e 's2' para HMacSHA256. Cada web service pode escolher quais dos algoritmos ele suporta e, caso esse parâmetro seja omitido, qual é o algoritmo padrão. Outras opções podem ser definidas pelos webservices, caso necessário. deve ser usado apenas na versão 0.2 do protocolo.  - **protocol-version**: versão do protocolo de autenticação UOLWS. Opções são 0.1 ou 0.2.    ## Calculando a Assinatura  ### Protocolo Versão 0.2    - **signature**: Base64( hmac-algorithm( secret-key, string-to-sign) );  - **string-to-sign**: `HTTP-Verb + \"\\n\" + Content-MD5 + \"\\n\" + Content-Type + \"\\n\" + Date + \"\\n\" + Canonicalized-X-UOL-Headers + HTTP-Path-Info`  - **HTTP-Verb**: O verbo da requisição HTTP; POST, GET, DELETE etc.    > Os headers Content-MD5, Content-Type e Date tem natureza posicional, por isso, o nome do Header não deve ser inserido na StringToSign, apenas seus valores. Se os Headers Content-Type e Content-MD5 não estiverem presentes na requisição(ambos são opcionais para requisições PUT e sem sentido para GET) considerar a string vazia como o seu valor, ficando apenas o \"\\n\" na respectiva posição. O valor do Header Date é obrigatório.    - **Canonicalized-X-UOL-Headers**     1.  Converter os Headers que comecem com 'X-UOL-' para lower-case. Por exemplo, 'X-UOL-AlternateKey' se torna 'x-uol-alternatekey'     2. Ordenar os Headers lexicograficamente pelos seus nomes. Desse mode x-uol-alternatekey vem antes de x-uol-date.     3. Combinar os Header com o mesmo nome em um Header único com os seus valores separados por vírgulas e um espaços em branco entre os valores. Por exemplo, 'x-uol-alternate-key: ip=127.0.0.1' e 'x-uol-alternate-key: idt_person=1237654' devem ser combinados em 'x-uol-alternate-key: ip=127.0.0.1, idt_person=1237654'     4. Fazer 'Unfold' dos Headers longos, removendo LWS(rfc2616, sessão 2.2) por um único espaço em branco.     5. Remover os espaços entre os dois pontos e o valor do header. Por exemplo 'x-uol-alternate-key: ip=127.0.0.1,idt_person=1237654' se torna 'x-uol-alternate-key:ip=127.0.0.1,idt_person=1237654'     6. Finalmente, adicione um 'new-line'(\\n) para cada Header da lista, resultando em uma só String.    - **HTTP-Path-Info**: A parte de URL da requisição que vai de após nome do servidor até a query string. Exemplos    Primeira Linha da requisição  | HTTP-Path-Info  --------|-------------  GET http://foo.bar/a.html | /a.html  HEAD /xyz?a=b HTTP/1.1 | /xyz  POST /some/path.html HTTP/1.1 | /some/path.html    ### Protocolo Versão 0.1    > Devido a questões de segurança este protocolo foi descontinuado
 *
 * OpenAPI spec version: 3.0.X
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.14
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Compasso\Bpag\Model\Api;

use \ArrayAccess;
use Compasso\Bpag\Model\Api\ObjectSerializer;

/**
 * MeioDePagamento Class Doc Comment
 *
 * @category Class
 * @package  Compasso\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MeioDePagamento implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Meio de pagamento';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'financial_institution' => 'string',
        'payment_subtype' => 'string',
        'payment_type' => 'string',
        'processor' => 'string',
        'technology' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'financial_institution' => null,
        'payment_subtype' => null,
        'payment_type' => null,
        'processor' => null,
        'technology' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'financial_institution' => 'financialInstitution',
        'payment_subtype' => 'paymentSubtype',
        'payment_type' => 'paymentType',
        'processor' => 'processor',
        'technology' => 'technology'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'financial_institution' => 'setFinancialInstitution',
        'payment_subtype' => 'setPaymentSubtype',
        'payment_type' => 'setPaymentType',
        'processor' => 'setProcessor',
        'technology' => 'setTechnology'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'financial_institution' => 'getFinancialInstitution',
        'payment_subtype' => 'getPaymentSubtype',
        'payment_type' => 'getPaymentType',
        'processor' => 'getProcessor',
        'technology' => 'getTechnology'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FINANCIAL_INSTITUTION_UNKNOWN = 'UNKNOWN';
    const FINANCIAL_INSTITUTION_CIELO = 'CIELO';
    const FINANCIAL_INSTITUTION_REDECARD = 'REDECARD';
    const FINANCIAL_INSTITUTION_ITAU = 'ITAU';
    const FINANCIAL_INSTITUTION_BB = 'BB';
    const FINANCIAL_INSTITUTION_BRADESCO = 'BRADESCO';
    const FINANCIAL_INSTITUTION_PAGSEGURO = 'PAGSEGURO';
    const FINANCIAL_INSTITUTION_SANTANDER = 'SANTANDER';
    const FINANCIAL_INSTITUTION_GETNET = 'GETNET';
    const PAYMENT_SUBTYPE_UNKNOWN = 'UNKNOWN';
    const PAYMENT_SUBTYPE_CREDIT = 'CREDIT';
    const PAYMENT_SUBTYPE_DEBIT = 'DEBIT';
    const PAYMENT_SUBTYPE_VOUCHER = 'VOUCHER';
    const PAYMENT_SUBTYPE_PAGSEGURO = 'PAGSEGURO';
    const PAYMENT_SUBTYPE_REGISTERED = 'REGISTERED';
    const PAYMENT_TYPE_UNKNOWN = 'UNKNOWN';
    const PAYMENT_TYPE_CARD = 'CARD';
    const PAYMENT_TYPE_BOOKLET = 'BOOKLET';
    const PROCESSOR_UNKNOWN = 'UNKNOWN';
    const PROCESSOR_CIELO = 'CIELO';
    const PROCESSOR_CIELO_V3 = 'CIELO_V3';
    const PROCESSOR_KOMERCI = 'KOMERCI';
    const PROCESSOR_EREDE = 'EREDE';
    const PROCESSOR_SITEF = 'SITEF';
    const PROCESSOR_ITAU = 'ITAU';
    const PROCESSOR_BPAG = 'BPAG';
    const PROCESSOR_BB = 'BB';
    const PROCESSOR_PAGSEGURO = 'PAGSEGURO';
    const PROCESSOR_BRADESCO = 'BRADESCO';
    const PROCESSOR_SANTANDER = 'SANTANDER';
    const PROCESSOR_GETNET = 'GETNET';
    const TECHNOLOGY_UNKNOWN = 'UNKNOWN';
    const TECHNOLOGY_WEBSERVICES = 'WEBSERVICES';
    const TECHNOLOGY_X25 = 'X25';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFinancialInstitutionAllowableValues()
    {
        return [
            self::FINANCIAL_INSTITUTION_UNKNOWN,
            self::FINANCIAL_INSTITUTION_CIELO,
            self::FINANCIAL_INSTITUTION_REDECARD,
            self::FINANCIAL_INSTITUTION_ITAU,
            self::FINANCIAL_INSTITUTION_BB,
            self::FINANCIAL_INSTITUTION_BRADESCO,
            self::FINANCIAL_INSTITUTION_PAGSEGURO,
            self::FINANCIAL_INSTITUTION_SANTANDER,
            self::FINANCIAL_INSTITUTION_GETNET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentSubtypeAllowableValues()
    {
        return [
            self::PAYMENT_SUBTYPE_UNKNOWN,
            self::PAYMENT_SUBTYPE_CREDIT,
            self::PAYMENT_SUBTYPE_DEBIT,
            self::PAYMENT_SUBTYPE_VOUCHER,
            self::PAYMENT_SUBTYPE_PAGSEGURO,
            self::PAYMENT_SUBTYPE_REGISTERED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_UNKNOWN,
            self::PAYMENT_TYPE_CARD,
            self::PAYMENT_TYPE_BOOKLET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProcessorAllowableValues()
    {
        return [
            self::PROCESSOR_UNKNOWN,
            self::PROCESSOR_CIELO,
            self::PROCESSOR_CIELO_V3,
            self::PROCESSOR_KOMERCI,
            self::PROCESSOR_EREDE,
            self::PROCESSOR_SITEF,
            self::PROCESSOR_ITAU,
            self::PROCESSOR_BPAG,
            self::PROCESSOR_BB,
            self::PROCESSOR_PAGSEGURO,
            self::PROCESSOR_BRADESCO,
            self::PROCESSOR_SANTANDER,
            self::PROCESSOR_GETNET,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTechnologyAllowableValues()
    {
        return [
            self::TECHNOLOGY_UNKNOWN,
            self::TECHNOLOGY_WEBSERVICES,
            self::TECHNOLOGY_X25,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['financial_institution'] = isset($data['financial_institution']) ? $data['financial_institution'] : null;
        $this->container['payment_subtype'] = isset($data['payment_subtype']) ? $data['payment_subtype'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['processor'] = isset($data['processor']) ? $data['processor'] : null;
        $this->container['technology'] = isset($data['technology']) ? $data['technology'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFinancialInstitutionAllowableValues();
        if (!is_null($this->container['financial_institution']) && !in_array($this->container['financial_institution'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'financial_institution', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentSubtypeAllowableValues();
        if (!is_null($this->container['payment_subtype']) && !in_array($this->container['payment_subtype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_subtype', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getProcessorAllowableValues();
        if (!is_null($this->container['processor']) && !in_array($this->container['processor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'processor', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTechnologyAllowableValues();
        if (!is_null($this->container['technology']) && !in_array($this->container['technology'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'technology', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets financial_institution
     *
     * @return string
     */
    public function getFinancialInstitution()
    {
        return $this->container['financial_institution'];
    }

    /**
     * Sets financial_institution
     *
     * @param string $financial_institution Instituição financeira
     *
     * @return $this
     */
    public function setFinancialInstitution($financial_institution)
    {
        $allowedValues = $this->getFinancialInstitutionAllowableValues();
        if (!is_null($financial_institution) && !in_array($financial_institution, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'financial_institution', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['financial_institution'] = $financial_institution;

        return $this;
    }

    /**
     * Gets payment_subtype
     *
     * @return string
     */
    public function getPaymentSubtype()
    {
        return $this->container['payment_subtype'];
    }

    /**
     * Sets payment_subtype
     *
     * @param string $payment_subtype Sub-Tipo de pagamento
     *
     * @return $this
     */
    public function setPaymentSubtype($payment_subtype)
    {
        $allowedValues = $this->getPaymentSubtypeAllowableValues();
        if (!is_null($payment_subtype) && !in_array($payment_subtype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_subtype', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_subtype'] = $payment_subtype;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type Tipo de pagamento
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($payment_type) && !in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets processor
     *
     * @return string
     */
    public function getProcessor()
    {
        return $this->container['processor'];
    }

    /**
     * Sets processor
     *
     * @param string $processor Processador
     *
     * @return $this
     */
    public function setProcessor($processor)
    {
        $allowedValues = $this->getProcessorAllowableValues();
        if (!is_null($processor) && !in_array($processor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'processor', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['processor'] = $processor;

        return $this;
    }

    /**
     * Gets technology
     *
     * @return string
     */
    public function getTechnology()
    {
        return $this->container['technology'];
    }

    /**
     * Sets technology
     *
     * @param string $technology Tecnologia
     *
     * @return $this
     */
    public function setTechnology($technology)
    {
        $allowedValues = $this->getTechnologyAllowableValues();
        if (!is_null($technology) && !in_array($technology, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'technology', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['technology'] = $technology;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


